@model WebDelishOrder.ViewModels.OrderViewModel

@{
	ViewData["PageTitle"] = "Cập nhật đơn hàng";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="pcoded-main-container">
	<div class="main-body">
		<div class="page-wrapper">
			<div class="page-body">
				<div class="row">

					<!-- Product List Section -->
					<div class="col-sm-8">
						<div class="card">
							<div class="card-header">
								<h4>Danh sách đơn hàng</h4>
								<div class="row mb-3">
									<!-- Search Input -->
									<div class="col-md-4">
										<input type="text" id="searchTerm" class="form-control" placeholder="Nhập từ khóa tìm kiếm..." />
									</div>
									<!-- Dropdown Lọc Trạng Thái -->
									<div class="col-md-4">
										<select id="orderStatusFilter" class="form-select">
											<option value="all">Tất cả</option>
											<option value="0">Chờ xác nhận</option>
											<option value="1">Đang chuẩn bị</option>
											<option value="2">Đang giao hàng</option>
											<option value="3">Đã giao hàng</option>
											<option value="4">Đã hủy</option>
										</select>
									</div>
									<!-- Dropdown Sắp Xếp -->
									<div class="col-md-4">
										<select id="orderSort" class="form-select">
											<option value="desc">Mới nhất trước</option>
											<option value="asc">Cũ nhất trước</option>
										</select>
									</div>
								</div>

								<button id="btnSearch" class="btn btn-primary" type="button">Tìm kiếm</button>
							</div>
							<div id="content" class="card-block">
								<table class="table table-striped">
									<thead>
										<tr>
											<th>Mã đơn hàng</th>
											<th>Thời gian đặt hàng</th>
											<th>Trạng thái đơn</th>
											<th>In hóa đơn</th>
										</tr>
									</thead>
									<tbody id="orderList">
										@await Component.InvokeAsync("OrderMenu", new { searchTerm = "", pageIndex = 1 })
									</tbody>
								</table>

								<nav>
									<ul class="pagination" id="pagination">
										@for (int i = 1; i <= Model.TotalPages; i++)
										{
											<li class="page-item">
												<a class="page-link" href="#" onclick="loadOrders(@i)">@i</a>
											</li>
										}
									</ul>
								</nav>
							</div>
						</div>
					</div>
					<!-- Edit Form Section -->
					<div class="col-md-4">
						<div class="card shadow-sm">
							<div class="card-header bg-primary text-white text-center">
								<h5 class="mb-1">Cập nhật trạng thái đơn hàng</h5>
							</div>
							<div class="card-body">
								<form method="post" asp-action="UpdateOrder" asp-controller="Order" id="updateOrderForm">
									<input type="hidden" name="id" id="orderId" value="" />

									<!-- Trạng thái hiện tại hiển thị -->
									<div class="mb-3">
										<label class="form-label fw-bold">
											<i class="bi bi-info-circle text-info"></i> Trạng thái hiện tại
										</label>
										<div id="currentStatusDisplay" class="form-control bg-light">
											<!-- Sẽ được cập nhật bởi JavaScript -->
										</div>
									</div>

									<!-- Order Status -->
									<div class="mb-4">
										<label for="Status" class="form-label fw-bold">
											<i class="bi bi-clipboard-check text-primary"></i> Cập nhật trạng thái
										</label>
										<select class="form-select border-primary" name="Status" id="orderStatus" required>
											<!-- Sẽ được cập nhật bởi JavaScript -->
										</select>
										<div id="statusChangeDisabled" class="text-danger mt-2" style="display: none;">
											<i class="bi bi-exclamation-triangle"></i> Đơn hàng này không thể chuyển sang trạng thái khác.
										</div>
									</div>

									<!-- Shipping Address -->
									<div class="mb-4">
										<label for="ShippingAddress" class="form-label fw-bold">
											<i class="bi bi-geo-alt text-danger"></i> Địa chỉ giao hàng
										</label>
										<input type="text" class="form-control border-danger" name="ShippingAddress" id="orderShippingAddress" placeholder="Nhập địa chỉ giao hàng..." required />
									</div>

									<!-- Phone -->
									<div class="mb-4">
										<label for="Phone" class="form-label fw-bold">
											<i class="bi bi-telephone text-success"></i> Số điện thoại
										</label>
										<input type="text" class="form-control border-success" name="Phone" id="orderPhone" placeholder="Nhập số điện thoại..." required />
									</div>

									<!-- Payment Method -->
									<div class="mb-4">
										<label for="PaymentMethod" class="form-label fw-bold">
											<i class="bi bi-wallet2 text-warning"></i> Phương thức thanh toán
										</label>
										<input type="text" class="form-control border-warning" name="PaymentMethod" id="orderPaymentMethod" placeholder="Nhập phương thức thanh toán..." required />
									</div>

									<!-- Payment Status - Changed to dropdown -->
									<div class="mb-4">
										<label for="PaymentStatus" class="form-label fw-bold">
											<i class="bi bi-cash-coin text-info"></i> Trạng thái thanh toán
										</label>
										<select class="form-select border-info" name="PaymentStatus" id="orderPaymentStatus" required>
											<option value="Đã thanh toán">Đã thanh toán</option>
											<option value="Chưa thanh toán">Chưa thanh toán</option>
										</select>
									</div>

									<!-- Action Buttons -->
									<div class="d-flex justify-content-between">
										<button type="submit" id="btnUpdateOrder" class="btn btn-primary">
											<i class="bi bi-check-circle"></i> Cập nhật
										</button>
										<button type="button" class="btn btn-secondary" onclick="resetForm()">
											<i class="bi bi-x-circle"></i> Hủy
										</button>
									</div>
								</form>
							</div>
						</div>
					</div>

				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		// Định nghĩa tên trạng thái
		const statusName = {
			'0': 'Chờ xác nhận',
			'1': 'Đang chuẩn bị',
			'2': 'Đang giao hàng',
			'3': 'Đã giao hàng',
			'4': 'Đã hủy'
		};

		// Định nghĩa quy tắc chuyển trạng thái
		const statusTransitions = {
			'0': ['0', '1', '4'],      // Chờ xác nhận -> (Giữ nguyên, Đang chuẩn bị, Đã hủy)
			'1': ['1', '2', '4'],      // Đang chuẩn bị -> (Giữ nguyên, Đang giao hàng, Đã hủy)
			'2': ['2', '3'],           // Đang giao hàng -> (Giữ nguyên, Đã giao hàng)
			'3': ['3'],                // Đã giao hàng -> (Không thể chuyển đổi)
			'4': ['4']                 // Đã hủy -> (Không thể chuyển đổi)
		};

		// CSS classes cho các trạng thái
		const statusColors = {
			'0': 'bg-warning text-dark',
			'1': 'bg-info text-white',
			'2': 'bg-primary text-white',
			'3': 'bg-success text-white',
			'4': 'bg-danger text-white'
		};

		function loadOrders(pageIndex) {
			var searchTerm = $('#searchTerm').val();
			var status = $('#orderStatusFilter').val();
			var sort = $('#orderSort').val();
			console.log("Loading orders with:", { searchTerm, status, sort, pageIndex });
			$.ajax({
				url: '/Order/LoadMenu',
				type: 'GET',
				data: {
					searchTerm: searchTerm,
					status: status,
					sort: sort,
					pageIndex: pageIndex
				},
				success: function (result) {
					$('#orderList').html(result);
				},
				error: function (xhr, status, error) {
					console.error("Error loading orders:", error);
				}
			});

			$.ajax({
				url: '/Order/GetTotalPages',
				type: 'GET',
				data: {
					searchTerm: searchTerm,
					status: status,
					sort: sort
				},
				success: function (data) {
					var paginationHtml = '<ul class="pagination">';
					for (var i = 1; i <= data.totalPages; i++) {
						if (i === pageIndex) {
							paginationHtml += '<li class="page-item active">' +
								'<a href="#" class="page-link" onclick="loadOrders(' + i + '); return false;">' + i + '</a>' +
								'</li>';
						} else {
							paginationHtml += '<li class="page-item">' +
								'<a href="#" class="page-link" onclick="loadOrders(' + i + '); return false;">' + i + '</a>' +
								'</li>';
						}
					}
					paginationHtml += '</ul>';
					$('#pagination').html(paginationHtml);
				},
				error: function (xhr, status, error) {
					console.error("Error loading total pages:", error);
				}
			});
		}

		// Cập nhật dropdown status theo quy tắc chuyển trạng thái
		function updateStatusDropdown(currentStatus) {
			// Xóa tất cả options hiện tại
			$('#orderStatus').empty();

			// Đảm bảo status là số nguyên
			currentStatus = parseInt(currentStatus);

			// Lấy các trạng thái được phép chuyển đổi
			const allowedStatuses = statusTransitions[currentStatus] || [];

			// Kiểm tra nếu chỉ có 1 trạng thái và là trạng thái hiện tại
			if (allowedStatuses.length === 1 && allowedStatuses[0] === currentStatus.toString()) {
				$('#statusChangeDisabled').show();
			} else {
				$('#statusChangeDisabled').hide();
			}

			// Thêm các options được phép
			allowedStatuses.forEach(status => {
				$('#orderStatus').append($('<option>', {
					value: status,
					text: statusName[status]
				}));
			});

			// Chọn trạng thái hiện tại
			$('#orderStatus').val(currentStatus);
		}

		// Hàm điền thông tin form
		function populateOrderForm(id, status, shippingAddress, phone, paymentMethod, paymentStatus) {
			// Log cho debug
			console.log("Populating form:", { id, status, shippingAddress, phone, paymentMethod, paymentStatus });

			// Cập nhật ID và các thông tin khác
			$('#orderId').val(id);

			// Hiển thị trạng thái hiện tại
			$('#currentStatusDisplay').text(statusName[status]);
			$('#currentStatusDisplay').removeClass('bg-light bg-warning bg-info bg-primary bg-success bg-danger')
									 .addClass(statusColors[status] || 'bg-light');

			// Cập nhật dropdown status theo quy tắc chuyển trạng thái
			updateStatusDropdown(status);

			// Điền các thông tin khác
			$('#orderShippingAddress').val(shippingAddress);
			$('#orderPhone').val(phone);

			// Convert paymentMethod to "tiền mặt" if it is "cash"
			if (paymentMethod === "Cash") {
				$('#orderPaymentMethod').val("Tiền mặt");
			} else {
				$('#orderPaymentMethod').val(paymentMethod);
			}

			// Convert paymentStatus to "chưa thanh toán" if it is "pending"
			  if (
					paymentStatus === "Đã thanh toán"||
					 // Trường hợp 2: Thanh toán tiền mặt và đơn hàng đã giao hàng (status = 3)
					(paymentMethod === "Tiền mặt" && status === '3')) {
				$('#orderPaymentStatus').val("Đã thanh toán");
			} else {
				$('#orderPaymentStatus').val("Chưa thanh toán");
			}
		}

		// Hàm reset form
		function resetForm() {
			$('#orderId').val('');
			$('#currentStatusDisplay').text('Chưa chọn đơn hàng');
			$('#currentStatusDisplay').removeClass('bg-warning bg-info bg-primary bg-success bg-danger')
									.addClass('bg-light');
			$('#orderStatus').empty();
			$('#orderShippingAddress').val('');
			$('#orderPhone').val('');
			$('#orderPaymentMethod').val('');
			$('#orderPaymentStatus').val('Chưa thanh toán'); // Đặt giá trị mặc định
			$('#statusChangeDisabled').hide();
		}

		// Mở chi tiết đơn hàng khi click
		$(document).on('click', '.toggle-detail', function () {
			console.log("clicked");
			var mainRow = $(this).closest('tr');
			var detailRow = mainRow.next('.detail-row');

			detailRow.toggle();

			var icon = $(this).find('i');
			if (detailRow.is(':visible')) {
				icon.removeClass('bi-plus-circle-fill text-primary')
					.addClass('bi-dash-circle-fill text-danger');
			} else {
				icon.removeClass('bi-dash-circle-fill text-danger')
					.addClass('bi-plus-circle-fill text-primary');
			}
		});

		// Xác nhận khi hủy đơn hàng
		$('#updateOrderForm').on('submit', function(e) {
			var newStatus = $('#orderStatus').val();
			var currentDisplayStatus = $('#currentStatusDisplay').text();

			// Nếu chuyển sang trạng thái Đã hủy, yêu cầu xác nhận
			if (newStatus === '4' && currentDisplayStatus !== 'Đã hủy') {
				if (!confirm('Bạn có chắc chắn muốn HỦY đơn hàng này không?')) {
					e.preventDefault();
					return false;
				}
			}
			return true;
		});

		$(document).ready(function () {
			// Khi bấm nút search
			$('#btnSearch').click(function () {
				loadOrders(1);
			});

			// Khi nhấn Enter trong ô search
			$('#searchTerm').keypress(function (e) {
				if (e.which === 13) {
					loadOrders(1);
					return false;
				}
			});

			// Lúc mới vào trang thì tự động load page 1
			loadOrders(1);

			// Khởi tạo form
			resetForm();
		});
	</script>
}
