// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebDelishOrder.Models;

#nullable disable

namespace WebDelishOrder.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250403225547_UpdateIdPType")]
    partial class UpdateIdPType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Authority", b =>
                {
                    b.Property<string>("AccountEmail")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("account_email");

                    b.Property<string>("RoleId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("role_id");

                    b.HasKey("AccountEmail", "RoleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RoleId" }, "role_id");

                    b.ToTable("authorities", (string)null);
                });

            modelBuilder.Entity("WebDelishOrder.Models.Account", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("fullname")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Fullname"), "utf8mb3");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.HasKey("Email")
                        .HasName("PRIMARY");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("WebDelishOrder.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .HasColumnType("char(8)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageCategory")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("imageCategory")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ImageCategory"), "utf8mb3");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb3");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("WebDelishOrder.Models.Comment", b =>
                {
                    b.Property<string>("AccountEmail")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("account_email");

                    b.Property<DateTime>("RegTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("regTime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Descript")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descript")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Descript"), "utf8mb3");

                    b.Property<int?>("Evaluate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("evaluate")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("AccountEmail", "RegTime")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ProductId" }, "product_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("WebDelishOrder.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountEmail")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("account_email");

                    b.Property<string>("Address")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("address")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Address"), "utf8mb3");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Gender"), "utf8mb3");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("name")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb3");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountEmail" }, "account_email");

                    b.HasIndex(new[] { "Phone" }, "idx_phone");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("WebDelishOrder.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountEmail")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("account_email");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("payment_status")
                        .HasDefaultValueSql("'pending'");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("RegTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("regTime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("shipping_address")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShippingAddress"), "utf8mb3");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'0'");

                    b.Property<float?>("TotalPrice")
                        .HasColumnType("float")
                        .HasColumnName("total_price");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountEmail" }, "account_email")
                        .HasDatabaseName("account_email1");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("WebDelishOrder.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<float?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("price")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quantity")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("product_id1");

                    b.ToTable("order_details", (string)null);
                });

            modelBuilder.Entity("WebDelishOrder.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryId")
                        .HasMaxLength(8)
                        .HasColumnType("char(8)")
                        .HasColumnName("category_id")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descript")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descript")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Descript"), "utf8mb3");

                    b.Property<string>("ImageProduct")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_available")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb3");

                    b.Property<float?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "category_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("WebDelishOrder.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name")
                        .UseCollation("utf8mb3_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb3");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Authority", b =>
                {
                    b.HasOne("WebDelishOrder.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("authorities_ibfk_1");

                    b.HasOne("WebDelishOrder.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("authorities_ibfk_2");
                });

            modelBuilder.Entity("WebDelishOrder.Models.Comment", b =>
                {
                    b.HasOne("WebDelishOrder.Models.Account", "AccountEmailNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("AccountEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("comments_ibfk_1");

                    b.HasOne("WebDelishOrder.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("comments_ibfk_2");

                    b.Navigation("AccountEmailNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebDelishOrder.Models.Customer", b =>
                {
                    b.HasOne("WebDelishOrder.Models.Account", "AccountEmailNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("AccountEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("customers_ibfk_1");

                    b.Navigation("AccountEmailNavigation");
                });

            modelBuilder.Entity("WebDelishOrder.Models.Order", b =>
                {
                    b.HasOne("WebDelishOrder.Models.Account", "AccountEmailNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("AccountEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("orders_ibfk_1");

                    b.Navigation("AccountEmailNavigation");
                });

            modelBuilder.Entity("WebDelishOrder.Models.OrderDetail", b =>
                {
                    b.HasOne("WebDelishOrder.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("order_details_ibfk_1");

                    b.HasOne("WebDelishOrder.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("order_details_ibfk_2");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebDelishOrder.Models.Product", b =>
                {
                    b.HasOne("WebDelishOrder.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("products_ibfk_1");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebDelishOrder.Models.Account", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Customers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebDelishOrder.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebDelishOrder.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("WebDelishOrder.Models.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
