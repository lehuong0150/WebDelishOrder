@model WebDelishOrder.ViewModels.CategoryViewModel

@{
	ViewData["PageTitle"] = "Danh mục món ăn";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<body>
	<div class="pcoded-main-container">
		<div class="main-body">
			<div class="page-wrapper">
				<div class="page-body">
					<div class="row">
						<div class="col-sm-4">
							<div class="card">
								<div class="card-header">
									<h4>Danh mục</h4>
								</div>
								<div class="card-block">
									@using (Html.BeginForm(Model.NewCategory.Id != null ? "Edit" : "Create", "Category", FormMethod.Post, new { enctype = "multipart/form-data" }))
									{
										@Html.AntiForgeryToken()

										<!-- Giữ ID để cập nhật nếu có -->
										@if (Model.NewCategory.Id != null)
										{
											@Html.HiddenFor(m => m.NewCategory.Id)
										}
										<div class="form-group">
											<label>Mã danh mục: </label>
											@Html.TextBoxFor(m => m.NewCategory.Id, new { @class = "form-control", required = "required" })
										</div>

										<div class="form-group">
											<label>Tên danh mục: </label>
											@Html.TextBoxFor(m => m.NewCategory.Name, new { @class = "form-control", required = "required" })
										</div>

										<div class="form-group">
											<label>Ảnh danh mục: </label>
											<input type="file" name="ImageFile" class="form-control" />

											@if (!string.IsNullOrEmpty(Model.NewCategory.ImageCategory))
											{
												<div style="margin-top:10px;">
													<img src="@Model.NewCategory.ImageCategory" width="100" height="100" style="border:1px solid #ddd; padding:5px;" />
												</div>
											}

											<!-- Truyền link ảnh cũ để giữ lại nếu không upload ảnh mới -->
											@Html.HiddenFor(m => m.NewCategory.ImageCategory)
										</div>

										<div class="form-group form-check">
											@Html.CheckBoxFor(m => m.NewCategory.IsAvailable, new { @class = "form-check-input" })
											<label class="form-check-label">Is Active</label>
										</div>

										<button type="submit" class="btn btn-primary">
											@(Model.NewCategory.Id != null ? "Update" : "Add") <!-- Tùy theo hành động -->
										</button>
										<button type="reset" class="btn btn-secondary">Clear</button>
									}
								</div>

							</div>
						</div>

						<div class="col-sm-8">
							<div class="card">
								<div class="card-header">
									<h4>Danh sách danh mục</h4>
								</div>
								<div class="input-group mb-3">
									<input type="text" id="searchTerm" class="form-control" placeholder="Nhập từ khóa tìm kiếm..." />
									<button id="btnSearch" class="btn btn-primary" type="button">Tìm kiếm</button>
								</div>
								<div class="card-block">
									<table class="table table-striped">
										<thead>
											<tr>
												<th>Tên </th>
												<th>Ảnh</th>
												<th>Is Active</th>
												<th>Ngày tạo</th>
												<th>Tùy chọn</th>
											</tr>
										</thead>
										<tbody id="categoryList">
											@await Component.InvokeAsync("CategoryMenu")
										</tbody>
									</table>
									<nav>
										<ul class="pagination" id="pagination">
											@for (int i = 1; i <= Model.TotalPages; i++)
											{
												<li class="page-item">
													<a class="page-link" href="#" onclick="loadProducts(@i)">@i</a>
												</li>
											}
										</ul>
									</nav>
								</div>
							</div>
						</div>

					</div>
				</div>
			</div>
		</div>
	</div>
</body>
@section Scripts {
	<script>

		function loadProducts(pageIndex) {
			var searchTerm = $('#searchTerm').val();
			$.ajax({
				url: '/Category/LoadMenu',
				type: 'GET',
				data: {
					searchTerm: searchTerm,
					pageIndex: pageIndex
				},
				success: function (result) {
					$('#categoryList').html(result);
				}
			});

			$.ajax({
				url: '/Category/GetTotalPages',
				type: 'GET',
				data: { searchTerm: searchTerm },
				success: function (data) {
					var paginationHtml = '<ul class="pagination">';
					for (var i = 1; i <= data.totalPages; i++) {
						if (i === pageIndex) {
						paginationHtml += '<li class="page-item active">' +
							'<a href="#" class="page-link" onclick="loadProducts(' + i + '); return false;">' + i + '</a>' +
							'</li>';
					} else {
						paginationHtml += '<li class="page-item">' +
							'<a href="#" class="page-link" onclick="loadProducts(' + i + '); return false;">' + i + '</a>' +
							'</li>';
					}
					}
					paginationHtml += '</ul>';
					$('#pagination').html(paginationHtml);
				}
			});
		}
			$(document).ready(function () {
			// Khi bấm nút search
			$('#btnSearch').click(function () {
				loadProducts(1);
			});

			// Khi nhấn Enter trong ô search
			$('#searchTerm').keypress(function (e) {
				if (e.which === 13) {
					loadProducts(1);
					return false;
				}
			});

			// Lúc mới vào trang thì tự động load page 1
			loadProducts(1);

		
	</script>
}