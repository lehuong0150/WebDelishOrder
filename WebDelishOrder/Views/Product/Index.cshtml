@model WebDelishOrder.ViewModels.ProductViewModel

@{
    ViewData["PageTitle"] = "Danh sách món ăn";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<body>
<div class="pcoded-main-container">
    <div class="main-body">
        <div class="page-wrapper">
            <div class="page-body">
                <div class="row">
                    <!-- Product Form Section -->
                    <div class="col-sm-4">
                        <div class="card">
                            <div class="card-header">
                                <h4>Sản phẩm</h4>
                            </div>
                            <div class="card-block">
                                @using (Html.BeginForm(Model.NewProduct.Id != 0 ? "Edit" : "Create", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                {
                                    @Html.AntiForgeryToken()

                                    @if (Model.NewProduct.Id != null)
                                    {
                                        @Html.HiddenFor(m => m.NewProduct.Id)
                                    }
                                    
                                    <div class="form-group">
                                        <label>Tên sản phẩm: </label>
                                        @Html.TextBoxFor(m => m.NewProduct.Name, new { @class = "form-control", required = "required" })
                                    </div>

                                    <div class="form-group">
                                        <label>Mô tả: </label>
                                        @Html.TextBoxFor(m => m.NewProduct.Descript, new { @class = "form-control" })
                                    </div>

                                    <div class="form-group">
                                        <label>Giá: </label>
                                        @Html.TextBoxFor(m => m.NewProduct.Price, new { @class = "form-control", type = "number", required = "required" })
                                    </div>

                                    <div class="form-group">
                                        <label>Số lượng: </label>
                                        @Html.TextBoxFor(m => m.NewProduct.Quantity, new { @class = "form-control", type = "number", step = "0", required = "required" })
                                    </div>
                                        <div class="form-group">
                                            <label>Chọn ảnh từ máy:</label>
                                            <input type="file" name="ImageFile" class="form-control" />

                                            <label style="margin-top:10px;">Hoặc dán link ảnh (URL):</label>
                                            <input type="text" name="ImageUrl" class="form-control" value="@Model.NewProduct.ImageProduct" placeholder="https://..." />

                                            @if (!string.IsNullOrEmpty(Model.NewProduct.ImageProduct))
                                            {
                                                <div style="margin-top:10px;">
                                                    <img src="@Model.NewProduct.ImageProduct" width="100" height="100" style="border:1px solid #ddd; padding:5px;" />
                                                </div>
                                            }

                                            @Html.HiddenFor(m => m.NewProduct.ImageProduct)
                                        </div>


                                    <div class="form-group">
                                        <label>Sản phẩm: </label>
                                        @Html.DropDownListFor(
                                                 m => m.NewProduct.CategoryId,
                                                 new SelectList(ViewBag.CategoryList, "Id", "Name"),
                                                 "Chọn thể loại",
                                                 new { @class = "form-control" }
                                                 )
                                    </div>

                                    <div class="form-group row mb-3">
                                        <div class="col-sm-10 offset-sm-2">
                                            <div class="form-check">
                                                @Html.CheckBoxFor(m => m.NewProduct.IsAvailable, new { @class = "form-check-input", id = "isAvailable" })
                                                    <label class="form-check-label" for="isAvailable">Trạng thái</label>
                                            </div>
                                        </div>
                                    </div>

                                    <button type="submit" class="btn btn-primary">
                                        @(Model.NewProduct.Id != 0 ? "Cập nhật" : "Thêm") <!-- Tùy theo hành động -->
                                    </button>
                                    <button type="reset" class="btn btn-secondary">Xóa</button>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Product List Section -->
                    <div class="col-sm-8">
                        <div class="card">
                            <div class="card-header">
                                <h4>Danh sách sản phẩm</h4>
                                <div class="input-group mb-3">
                                    <input type="text" id="searchTerm" class="form-control" placeholder="Nhập từ khóa tìm kiếm..." />
                                    <button id="btnSearch" class="btn btn-primary" type="button">Tìm kiếm</button>
                                </div>

                            </div>
                            <div id="content" class="card-block">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Tên</th>
                                            <th>Ảnh</th>
                                            <th>Giá</th>
                                            <th>Số lượng</th>
                                            <th>Danh mục</th>
                                            <th>Trạng thái</th>
                                        </tr>
                                    </thead>
                                    <tbody id="productList">
                                        @await Component.InvokeAsync("ProductMenu", new { searchTerm = "", pageIndex = 1 })
                                    </tbody>
                                </table>

                                <nav>
                                    <ul class="pagination" id="pagination">
                                        @for (int i = 1; i <= Model.TotalPages; i++)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="#" onclick="loadProducts(@i)">@i</a>
                                            </li>
                                        }
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>
</body>
@section Scripts {
    <script>
         
        function loadProducts(pageIndex) {
            var searchTerm = $('#searchTerm').val();
            $.ajax({
                url: '/Product/LoadMenu',
                type: 'GET',
                data: {
                    searchTerm: searchTerm,
                    pageIndex: pageIndex
                },
                success: function (result) {
                    $('#productList').html(result);
                }
            });

            $.ajax({
                url: '/Product/GetTotalPages',
                type: 'GET',
                data: { searchTerm: searchTerm },
                success: function (data) {
                    var paginationHtml = '<ul class="pagination">';
                    for (var i = 1; i <= data.totalPages; i++) {
                        if (i === pageIndex) {
                        paginationHtml += '<li class="page-item active">' +
                            '<a href="#" class="page-link" onclick="loadProducts(' + i + '); return false;">' + i + '</a>' +
                            '</li>';
                    } else {
                        paginationHtml += '<li class="page-item">' +
                            '<a href="#" class="page-link" onclick="loadProducts(' + i + '); return false;">' + i + '</a>' +
                            '</li>';
                    }
                    }
                    paginationHtml += '</ul>';
                    $('#pagination').html(paginationHtml);
                }
            });
        }
            $(document).ready(function () {
            // Khi bấm nút search
            $('#btnSearch').click(function () {
                loadProducts(1);
            });

            // Khi nhấn Enter trong ô search
            $('#searchTerm').keypress(function (e) {
                if (e.which === 13) {
                    loadProducts(1);
                    return false;
                }
            });

            // Lúc mới vào trang thì tự động load page 1
            loadProducts(1);
        });
        //mo them chi tiet
        $(document).on('click', '.toggle-detail', function () {
            console.log("clicked");
            var mainRow = $(this).closest('tr');
            var detailRow = mainRow.next('.detail-row');

            detailRow.toggle();

            var icon = $(this).find('i');
            if (detailRow.is(':visible')) {
                icon.removeClass('bi-plus-circle-fill text-primary')
                    .addClass('bi-dash-circle-fill text-danger');
            } else {
                icon.removeClass('bi-dash-circle-fill text-danger')
                    .addClass('bi-plus-circle-fill text-primary');
            }
        });

    </script>
}
